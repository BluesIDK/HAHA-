create table products ( productID int primary key, productname nvarchar(50), price decimal(10, 2), category nvarchar(50) );
create table customers ( customerID int primary key, customername nvarchar(50), address nvarchar(100) );
create table orders ( orderID int primary key, customerID int, productID int, quantity int, orderdate date,
foreign key (customerID) references customers(customerID),
foreign key (productID) references products(productID) );

insert into products (productID, productname, price, category) 
values (1, 'cookies', 10, 'snacks');

insert into products values (2, 'Candy', 5.2, 'Sweets'),
(3, 'Chips', 8.5, 'Snacks'),
(4, 'Juice', 15, 'Beverages'),
(5, 'Ice Cream', 12, 'Desserts');

insert into customers values (1, 'Ahmed', 'Tunisia'),
(2, 'Coulibaly', 'Senegal'),
(3, 'Hasan', 'Egypt'),
(4, 'Yasmine', 'Morocco'),
(5, 'John', 'France'),
(6, 'Fatima', 'Algeria');


insert into orders values (1, 1, 2, 3, '2023-01-22'),
(2, 2, 1, 10, '2023-04-14'),
(3, 3, 4, 5, '2023-06-10'),
(4, 5, 3, 7, '2023-07-05'),
(5, 6, 5, 2, '2023-10-15');


update orders
set quantity=6
where orderID=2;

alter table orders
drop column customerID;

DELETE FROM orders
WHERE CustomerID = 3;

DELETE FROM Customers
WHERE CustomerID = 3;

select *
from orders;

select*
from customers;

select *
from products;


-- Retrieve All Products and Their Categories
select productname, category
from products;


-- Find Customers from a Specific Country
select customerID, address
from customers
where address = 'Algeria';

-- Write a query to find all orders placed by the customer named "Ahmed." Include the OrderID, ProductID, Quantity, and Order Date.
select o.orderID, o.productID, o.quantity, o.orderdate
from orders o
join customers c on o.customerID = c.customerID
where c.customername = 'Ahmed';

-- Write a query to display products with a price greater than 10.
select productname
from products p
where p.price > 10;

-- Retrieve the ProductID, Product Name, and total quantity ordered for each product.
select p.productID, p.productname, sum(o.quantity) as totalquantity
from products p
join orders o on p.productID = o.productID
group by p.productID, p.productname;

-- Assume there's a ShipDate column in the ORDERS table. Write a query to find all orders where the shipping date is after "2023-07-01."
select o.orderID, o.shipdate
from orders o
where o.shipdate > '2023-07-01';

-- Write a query to count the number of customers from each country.
select sum(c.customerID) as totalcustomers, c.address
from customers c
group by c.address;

-- Write a query to find the OrderID and Order Date of the most recent order in the database.
select top 1 o.orderID, o.orderdate
from orders o
order by o.orderdate desc;

-- Write a query to list all orders with the Product Name, Quantity, and Order Date.
select o.orderID, o.quantity, o.orderdate, p.productname
from orders o
join products p on o.productID = p.productID;



-- Write a query to calculate the total revenue generated by each product. Use the formula: Revenue = Unit Price × Quantity.
select sum(o.quantity * p.price) as revenue, p.productname
from products p
join orders o on p.productID = o.productID
group by p.productname;



-- Retrieve the ProductID and Product Name of all products that have no orders.
select p.productID, p.productname
from products p
left join orders o on o.productID = p.productID
where o.productID is NULL;




-- Write a query to find all customers who ordered "Ice Cream."
select o.customerID
from orders o
join products p on o.productID = p.productID
where p.productname = 'Ice Cream';


-- Write a query to calculate the total spending of each customer and display the top 3 customers by total spending.
select top 3 o.customerID, sum(p.price) as totalspending
from orders o
join products p on o.productID = p.productID
group by o.customerID
order by totalspending desc;


-- Write a query to calculate the average quantity of items ordered per order.
select o.orderID, avg(o.quantity) as averageQ
from orders o 
group by o.orderID;

-- Assume there’s a Discount column in the ORDER_DETAILS table. Write a query to find all orders where the discount is greater than 10%.
select o.orderID 
from orders o
where o.discount > 10%;



